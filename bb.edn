;; See https://book.babashka.org/#tasks
{:min-bb-version "0.6.2"
 :paths ["bb/src"]
 :deps {io.github.lispyclouds/bblgum {:git/sha "7ebae0e2231899fe2a6ad44bc9ef5fca64099fcd"}
        org.babashka/cli {:mvn/version "0.4.39"}}
 :tasks
 {:requires (juxt.tasks
             [clojure.core.async :as async]
             [clojure.edn :as edn]
             [clojure.java.io :as io]
             [babashka.cli :as cli])

  debug
  {:doc "DEBUG"
   :task (juxt.tasks/debug)}

  reset
  {:doc "Factory reset"
   :task (juxt.tasks/reset)}

  bootstrap
  {:doc "Bootstrap system"
   :task (juxt.tasks/bootstrap {})}

  ls {:task (juxt.tasks/ls)}
  ls-type {:task (juxt.tasks/ls-type (first *command-line-args*))}
  users {:task (juxt.tasks/ls-type "user")}
  access-tokens {:task (juxt.tasks/ls-type "access-token")}

  openid
  {:task (juxt.tasks/openid {})}

  system-api
  {:task (juxt.tasks/system-api {})}

  auth-server
  {:task (juxt.tasks/auth-server {})}

  add-user
  {:task (juxt.tasks/add-user {})}

  grant-role
  {:task (juxt.tasks/grant-role {})}

  register-application
  {:task (juxt.tasks/register-application {})}

  register-scope
  {:task (juxt.tasks/register-scope {})}

  request-access-token
  {:task (juxt.tasks/request-access-token {})}

  apply
  {:task
   (let [spec {:alias {:c :config
                       :a :no-confirm}
               :require [:config]
               :coerce {:config (fn [x] (when x (io/file x)))}
               :validate {:config {:pred (fn [x] (when x (.exists x)))
                                   :ex-msg (fn [x] (format "File must exist: %s" x))}}}
         {config-file :config
          no-confirm :no-confirm}
         (cli/parse-opts *command-line-args* spec)

         config (edn/read-string (slurp config-file))]

     (binding [juxt.tasks/*no-confirm* no-confirm]
       (doseq [[task-kw args] config
               :let [task (ns-resolve 'juxt.tasks (symbol task-kw))]]
         (if args
           (task args)
           (task)))))}}}
