;; See https://book.babashka.org/#tasks
{:min-bb-version "0.6.2"
 :paths ["bb"]
 :deps {io.github.lispyclouds/bblgum {:git/sha "7ebae0e2231899fe2a6ad44bc9ef5fca64099fcd"}
        org.babashka/cli {:mvn/version "0.4.39"}}
 :tasks
 {:requires (juxt.tasks
             juxt.installer-tree
             [clojure.core.async :as async]
             [clojure.edn :as edn]
             [clojure.java.io :as io]
             [babashka.cli :as cli]
             )

  reset {:doc "Factory reset"
         :task (juxt.tasks/reset)}

  bootstrap {:doc "Bootstrap system"
             :task (juxt.tasks/bootstrap
                    {:auth-base-uri "https://auth.site.test"})}

  ls {:task (juxt.tasks/ls)}
  ls-type {:task (juxt.tasks/ls-type (first *command-line-args*))}
  users {:task (juxt.tasks/ls-type "user")}
  access-tokens {:task (juxt.tasks/ls-type "access-token")}

  openid {:task (juxt.tasks/openid
                 {:auth-base-uri "https://auth.site.test"})}

  system-api {:task (juxt.tasks/system-api
                     {:auth-base-uri "https://auth.site.test"
                      :data-base-uri "https://data.site.test"})}

  auth-server {:task (juxt.tasks/auth-server
                      {:auth-base-uri "https://auth.site.test"})}

  add-user {:task (juxt.tasks/add-user
                   {:auth-base-uri "https://auth.site.test"
                    :data-base-uri "https://data.site.test"
                    :iss "https://juxt.eu.auth0.com"})}

  grant-role {:task (juxt.tasks/grant-role
                     {:auth-base-uri "https://auth.site.test"})}

  register-application {:task (juxt.tasks/register-application
                               {:auth-base-uri "https://auth.site.test"})}

  reinstall-openid (juxt.tasks/reinstall
                    {:auth-base-uri "https://auth.site.test"
                     :resource "https://auth.site.test/operations/openid/exchange-code-for-id-token"})

  apply
  {:task
   (let [spec {:alias {:c :config}
               :require [:config]
               :coerce {:config (fn [x] (when x (io/file x)))}
               :validate {:config {:pred (fn [x] (when x (.exists x)))
                                   :ex-msg (fn [x] (format "File must exist: %s" x))}}}
         {config-file :config}
         (cli/parse-opts *command-line-args* spec)

         config (edn/read-string (slurp config-file))]

     (doseq [[task-kw args] config
             :let [task (ns-resolve 'juxt.tasks (symbol task-kw))]]
       (if args
         (task args)
         (task))))}

  installer-tree {:task (juxt.installer-tree/installer-tree)}}}
