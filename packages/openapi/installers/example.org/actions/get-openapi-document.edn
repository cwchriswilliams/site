{:install
 {:juxt.site/subject-id "https://core.example.org/_site/subjects/system"
  :juxt.site/action-id "https://core.example.org/_site/actions/create-action"
  :juxt.site/input
  {:xt/id "{{$id}}"

   :juxt.site/state
   {:juxt.site.sci/program
    #juxt.pprint
    (let [openapi-paths
          (xt/q '{:find [(pull path [* {(:juxt.site/_variant-of {:as :variants}) [*]}])]
                  :where [[path :juxt.site/type "https://meta.juxt.site/types/openapi-path"]]})

          allowed-actions (set (map :xt/id (juxt.site/allowed-actions {})))

          paths
          (reduce
           (fn [acc [path]]
             (assoc
              acc
              (:openapi.v3/path path)
              (reduce
               (fn [acc [method metadata]]
                 (cond-> acc
                   ;; When the action associated with the operation is
                   ;; permitted, we should show the operation
                   true
                   ;; Until this is issue is
                   ;; resolved (https://github.com/swagger-api/swagger-ui/issues/4324)
                   ;; we can't to this:
                   #_(seq (clojure.set/intersection
                           (set (:juxt.site/actions metadata))
                           allowed-actions))
                   (assoc
                    (name method)
                    {"operationId" (:openapi.v3/operation-id metadata)
                     "security" [{"oauth" [(:openapi.v3/scope metadata)]}]
                     "responses"
                     (case method
                       :get
                       {"200"
                        {"content"
                         (reduce
                          (fn [acc variant]
                            (assoc acc (:juxt.http/content-type variant) {}))
                          {}
                          (sort-by :juxt.http/content-type (:variants path)))
                         "description" "Successful operation"}}
                       {})
                     "tags" (:openapi.v3/tags metadata)
                     "description" (:juxt.site/description metadata)})))
               {} (:juxt.site/methods path))))
           {}
           openapi-paths)]

      {"openapi" "3.0.2"
       "info" (:openapi.v3/info *resource*)
       "servers" (:openapi.v3/servers *resource*)
       "paths" paths
       "components" (:openapi.v3/components *resource*)
       "tags" []
       "externalDocs" {}})}

   :juxt.site/rules
   [
    ;; Anyone
    [(allowed? subject action resource permission)
     [permission :xt/id]]]}}}
