{:install
 {:juxt.site/subject-id "https://core.example.org/_site/subjects/system"
  :juxt.site/action-id "https://core.example.org/_site/actions/create-action"
  :juxt.site/input
  {:xt/id "{{$id}}"

   :juxt.site.malli/input-schema
   [:map
    [:xt/id [:re "https://example.org/.*"]]
    [:juxt.site/issuer [:re "https://.*"]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)]

      (let [{:keys [juxt.site/issuer xt/id]}
            (case content-type
              "application/edn"
              (some->
               body
               (String.)
               clojure.edn/read-string
               juxt.site.malli/validate-input
               ))
            config-uri
            ;; See https://openid.net/specs/openid-connect-discovery-1_0.html#rfc.section.4.1
            ;;
            ;; "If the Issuer value contains a path component, any terminating / MUST be
            ;; removed before appending /.well-known/openid-configuration."
            ;;
            ;; This uses a reluctant regex qualifier.
            (str (second (re-matches (re-pattern "(.*?)/?") issuer)) "/.well-known/openid-configuration")
            config-response
            (java-http-clj.core/send
             {:method :get
              :uri config-uri
              :headers {"Accept" "application/json"}
              :connect-timeout (java.time.Duration/ofSeconds 2)}
             {:as :byte-array})
            _ (when-not (= 200 (:status config-response))
                (throw (ex-info "Failed to get issuer config" {:config-uri config-uri})))

            openid-configuration (jsonista.core/read-value (:body config-response))

            jwks-uri (get openid-configuration "jwks_uri")
            _ (when-not jwks-uri
                (throw
                 (ex-info
                  "jwks_uri not found in openid configuration"
                  {:issuer issuer
                   :openid-configuration openid-configuration})))

            get-jwks-response
            (java-http-clj.core/send
             {:method :get
              :uri jwks-uri
              :headers {"Accept" "application/json"}}
             {:as :byte-array})

            _ (when-not (= 200 (:status get-jwks-response))
                (throw (ex-info "Failed to get JWKS from issuer" {:issuer issuer})))

            jwks (jsonista.core/read-value (:body get-jwks-response))]

        {:xt/id id
         :juxt.site/type "https://meta.juxt.site/types/openid/issuer-configuration"
         :juxt.site/issuer issuer
         :juxt.site/openid-configuration openid-configuration
         :juxt.site/jwks jwks}))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    [[:xtdb.api/put *prepare*]]}

   :juxt.site/rules
   [
    [(allowed? subject action resource permission)
     [permission :juxt.site/subject subject]]

    [(allowed? subject action resource permission)
     [subject :juxt.site/user-identity id]
     [id :juxt.site/user user]
     [permission :juxt.site/user user]]]}}}
