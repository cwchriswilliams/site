{:install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/action-id "https://auth.example.org/_site/actions/create-action"
  :juxt.site/input
  {:xt/id "{{$id}}"

   ;; Eventually we should look up if there's a resource-owner decision in
   ;; place to cover the application and scopes requested.  The decision
   ;; should include details of what scope was requested by the application,
   ;; and what scope was approved by the resource-owner (which may be the
   ;; same). If additional scope is requested in a subsequent authorization
   ;; request, then a new approval decision will then be sought from the
   ;; resource-owner.
   ;;
   ;; If we can't find a decision, we create a new pending decision document
   ;; containing the state, application and scope. We redirect to a trusted
   ;; resource, within the same protection space or session scope,
   ;; e.g. /approve. This is given the id of a pending approval as a request
   ;; parameter, from which it can look up the pending approval document and
   ;; render the form appropriately given the attributes therein.
   ;;

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [qs (:ring.request/query *ctx*)
          _ (when-not qs
              (throw
               (ex-info "No query string" {:ring.response/status 400})))

          query (ring.util.codec/form-decode qs)

          client-id (get query "client_id")
          _ (when-not client-id
              (throw
               (ex-info "A client_id parameter is required" {:ring.response/status 400})))

          response-type (get query "response_type")
          _ (when-not response-type
              (throw
               (ex-info
                "A response_type parameter is required"
                {"error" "invalid_request"})))

          _ (when (sequential? response-type)
              (throw
               (ex-info
                "The response_type parameter must only be provided once"
                {"error" "invalid_request"})))

          _ (when-not (contains? #{"code" "token"} response-type)
              (throw (ex-info "Only response types of 'code' and 'token' are currently supported" {})))

          subject (:juxt.site/subject *ctx*)
          _ (when-not subject
              (throw (ex-info "Cannot create access-token: no subject" {})))

          ;; "The authorization server SHOULD document the size of any
          ;; value it issues." -- RFC 6749 Section 4.2.2
          access-token-length 16

          access-token (juxt.site.util/make-nonce access-token-length)
          ]

      {:client-id client-id
       :query query
       :access-token access-token
       :subject (:xt/id subject)})}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [{:keys [client-id query access-token subject]} *prepare*
          application (juxt.site/lookup-client client-id)
          _ (when-not application
              (throw
               (ex-info
                (format "No client found with client-id of %s" client-id)
                {:client-id client-id})))

          ;; Leave scope for now for tests to flush out
          ;;scopes (some-> *prepare* (get-in [:query "scope"]) ring.util.codec/form-decode (clojure.string/split (re-pattern "\\s")) set)
          ;;_ (doall (map juxt.site/lookup-scope scopes))

          scopes nil

          access-token-doc
          (cond->
              {:xt/id (str "https://auth.example.org/access-tokens/" access-token)
               :juxt.site/type "https://meta.juxt.site/types/access-token"
               :juxt.site/subject subject
               :juxt.site/application (:xt/id application)
               :juxt.site/token access-token}
              scopes (assoc :juxt.site/scope scopes))

          fragment
          (ring.util.codec/form-encode
           {"access_token" access-token
            "token_type" "bearer"
            "state" (get query "state")})

          location (format "%s#%s" (:juxt.site/redirect-uri application) fragment)]

      [[:xtdb.api/put access-token-doc]
       [:ring.response/status 303]
       [:ring.response/headers {"location" location}]])}

   :juxt.site/rules
   [
    [(allowed? subject action resource permission)
     [subject :juxt.site/user-identity id]
     [id :juxt.site/user user]
     [permission :juxt.site/user user]]]}}}
