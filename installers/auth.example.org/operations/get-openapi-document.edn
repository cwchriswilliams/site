{:install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-id "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"

   :juxt.site/state
   {:juxt.site.sci/program
    #juxt.pprint
    (let [openapi-paths
          ;; This is over-reaching. There should be an explicit
          ;; mapping between an OpenAPI and its collection of
          ;; endpoints.
          ;;
          ;; A Site instance might 'host' multiple OpenAPIs
          ;; Some users might not be able to 'see' a given OpenAPI
          ;; Scopes will likely be shared across an OpenAPI (for a given resource server)
          ;;
          ;; A Site instance may host multiple resource servers
          ;; Each resource server might host multiple OpenAPIs
          (xt/q '{:find [(pull path [* {(:juxt.site/_variant-of {:as :variants}) [*]}])]
                  :where [[path :juxt.site/type "https://meta.juxt.site/types/openapi-path"]]})

          allowed-operations (set (map :xt/id (juxt.site/allowed-operations {})))

          paths
          (reduce
           (fn [acc [path]]
             (assoc
              acc
              (:openapi.v3/path path)
              (merge
               ;; Path parameters
               (when-let [parameters (:openapi.v3/parameters path)]
                 {"parameters" parameters})
               (reduce
                (fn [acc [method method-details]]
                  (cond-> acc
                    ;; When the operation associated with the operation is
                    ;; permitted, we should show the operation
                    true
                    ;; Until this is issue is
                    ;; resolved (https://github.com/swagger-api/swagger-ui/issues/4324)
                    ;; we can't to this:
                    #_(seq (clojure.set/intersection
                            (set (:juxt.site/operations metadata))
                            allowed-operations))
                    (assoc
                     (name method)
                     (let [operation (xt/entity (:juxt.site/operation method-details))
                           scope (:juxt.site/scope operation)]
                       (merge
                        {"operationId" (:xt/id operation)
                         "description" (or
                                        (:juxt.site/description method-details)
                                        (:juxt.site/description operation))}
                        (when (seq scope)
                          {"security" [{"oauth" (vec (seq scope))}]})
                        {"responses"
                         (case method
                           :get
                           {"200"
                            {"content"
                             (reduce
                              (fn [acc variant]
                                (assoc acc (:juxt.http/content-type variant) {}))
                              {}
                              (or
                               (:juxt.site/variants method-details) ; explicit
                               (sort-by :juxt.http/content-type (:variants path)) ; implicit
                               ))
                             "description" "Successful operation"}
                            "401"
                            {"description" "Unauthorized"}}
                           {})}
                        (:openapi.v3/metadata method-details))))))
                {} (:juxt.site/methods path)))))
           {}
           openapi-paths)]

      {"openapi" "3.0.2"
       "info" (:openapi.v3/info *resource*)
       "servers" (:openapi.v3/servers *resource*)
       "paths" paths
       "components"
       (let [{:openapi.v3/keys [oauth-flows
                                oauth-authorization-url
                                oauth-token-url
                                oauth-scopes]} *resource*]
         (->
          (:openapi.v3/components *resource*)
          (assoc
           "securitySchemes"
           {"oauth"
            {"type" "oauth2"
             "flows"
             (cond-> {}
               (contains? oauth-flows "authorizationCode")
               (assoc "authorizationCode"
                      {"authorizationUrl" oauth-authorization-url
                       "tokenUrl" oauth-token-url
                       "scopes" oauth-scopes})
               (contains? oauth-flows "implicit")
               (assoc "implicit"
                      {"authorizationUrl" oauth-authorization-url
                       "scopes" oauth-scopes})
               (contains? oauth-flows "password")
               (assoc "password"
                      {"tokenUrl" oauth-token-url
                       "scopes" oauth-scopes})
               (contains? oauth-flows "clientCredentials")
               (assoc "clientCredentials"
                      {"tokenUrl" oauth-token-url
                       "scopes" oauth-scopes}))}})))

       "tags" (or (:openapi.v3/tags *resource*) [])
       ;;"externalDocs" {}
       })}

   :juxt.site/rules
   [
    ;; Anyone
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
