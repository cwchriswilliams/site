{:install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-id "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"

   :juxt.site/state
   {:juxt.site.sci/program
    #juxt.pprint
    (let [openapi-paths
          (xt/q '{:find [(pull path [* {(:juxt.site/_variant-of {:as :variants}) [*]}])]
                  :where [[path :juxt.site/type "https://meta.juxt.site/types/openapi-path"]]})

          allowed-operations (set (map :xt/id (juxt.site/allowed-operations {})))

          paths
          (reduce
           (fn [acc [path]]
             (assoc
              acc
              (:openapi.v3/path path)
              (reduce
               (fn [acc [method metadata]]
                 (cond-> acc
                   ;; When the operation associated with the operation is
                   ;; permitted, we should show the operation
                   true
                   ;; Until this is issue is
                   ;; resolved (https://github.com/swagger-api/swagger-ui/issues/4324)
                   ;; we can't to this:
                   #_(seq (clojure.set/intersection
                         (set (:juxt.site/operations metadata))
                         allowed-operations))
                   (assoc
                    (name method)
                    (let [operation (xt/entity (:juxt.site/operation metadata))
                          scope (:juxt.site/scope operation)]
                      (merge
                       {"operationId" (:juxt.site/operation metadata)}
                       (when (seq scope)
                         {"security" [{"oauth" (vec (seq scope))}]})
                       {
                        ;; TODO: This can be multiple scopes
                        ;; This must be the scope of the operation

                        "responses"
                        (case method
                          :get
                          {"200"
                           {"content"
                            (reduce
                             (fn [acc variant]
                               (assoc acc (:juxt.http/content-type variant) {}))
                             {}
                             (sort-by :juxt.http/content-type (:variants path)))
                            "description" "Successful operation"}}
                          {})
                        "tags" (:openapi.v3/tags metadata)
                        "description" (:juxt.site/description metadata)})))))
               {} (:juxt.site/methods path))))
           {}
           openapi-paths)]

      {"openapi" "3.0.2"
       "info" (:openapi.v3/info *resource*)
       "servers" (:openapi.v3/servers *resource*)
       "paths" paths
       "components" (:openapi.v3/components *resource*)
       "security" (:openapi.v3/security *resource*)
       "tags" []
       ;;"externalDocs" {}
       })}

   :juxt.site/rules
   [
    ;; Anyone
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
