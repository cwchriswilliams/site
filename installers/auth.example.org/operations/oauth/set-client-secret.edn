{:install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-id "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"

   :juxt.site.malli/input-schema
   [:map
    [:juxt.site/client-id
     [:re "[a-z-]{3,}"]]

    [:juxt.site/client-secret :string]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)]
      (case content-type
        "application/edn"
        (some->
         body
         (String.)
         clojure.edn/read-string
         juxt.site.malli/validate-input)))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [client-id (:juxt.site/client-id *prepare*)]
      (if-let [[client & others] (juxt.site/lookup-client client-id)]
        #_(throw (ex-info "client found" {:client client
                                        :client-id client-id
                                        :prepare *prepare*}))
        [[:xtdb.api/put (assoc client :juxt.site/client-secret (:juxt.site/client-secret *prepare*))]]
        (throw (ex-info "Client not found" {:client-id client-id}))))}

   :juxt.site/rules
   [[(allowed? subject operation resource permission)
     [permission :juxt.site/subject subject]
     ;; Permissions are only granted with respect to a given client-id
     [permission :juxt.site/client-id client-id]
     [resource :juxt.site/client-id client-id]]

    [(allowed? subject operation resource permission)
     [id :juxt.site/user user]
     [subject :juxt.site/user-identity id]
     [user :role role]
     [permission :role role]
     ;; Permissions are only granted with respect to a given client-id
     [permission :juxt.site/client-id client-id]
     [resource :juxt.site/client-id client-id]]]}}}
