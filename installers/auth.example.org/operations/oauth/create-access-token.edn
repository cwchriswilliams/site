;; TODO: Rename to exchange-code-for-token
{:install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-id "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"

   :juxt.site.malli/input-schema
   [:map
    ["grant_type" [:enum "authorization_code"]]
    ["code" :string]
    ;; TODO: Read https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3
    ["redirect_uri" {:optional true} :string]
    ["client_id" :string]
    ["code_verifier" {:optional true} :string]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [input (:juxt.site/received-representation *ctx*)
          content-type (apply format "%s/%s"
                              ((juxt :juxt.reap.alpha.rfc7231/type
                                     :juxt.reap.alpha.rfc7231/subtype)
                               (:juxt.reap.alpha.rfc7231/content-type input)))

          ;; "The authorization server SHOULD document the size of any
          ;; value it issues." -- RFC 6749 Section 4.2.2
          jti-length 16

          {client-id "client_id" :as form
           code "code"
           code-verifier "code_verifier"}
          (case content-type
            "application/x-www-form-urlencoded"
            (some->
             input
             :juxt.http/body
             (String.)
             ring.util.codec/form-decode
             juxt.site.malli/validate-input))]

      {:client-id client-id
       :code code
       :code-verifier code-verifier
       :jwt-claims {"iss" "https://auth.example.org"
                    "jti" (juxt.site.util/make-nonce jti-length)}
       :refresh-token (juxt.site.util/make-nonce 16)})}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [{:keys [client-id code code-verifier jwt-claims scopes refresh-token]} *prepare*

          {:juxt.site/keys [code-challenge code-challenge-method subject]}
          (juxt.site/lookup-authorization-code code)

          verified?
          juxt.site/verify-authorization-code
          {:code-verifier code-verifier
           :code-challenge code-challenge
           :code-challenge-method code-challenge-method}]

      (if verified?
        (let [{:juxt.site/keys [origin resource-server]} (juxt.site/lookup-client client-id)
              _ (assert origin)
              _ (assert resource-server)

              now (java.time.Instant/now)
              issued-at (java.util.Date/from now)
              not-before (java.util.Date/from (.minus now 2 java.time.temporal.ChronoUnit/MINUTES))

              ;; TODO: How to best make this configurable?
              access-token-expires-in (java.time.Duration/parse "PT15M")
              access-token-expiry (java.util.Date/from (.plus now access-token-expires-in))

              username (some-> subject xt/entity :juxt.site/user-identity xt/entity :juxt.site/user xt/entity :username)

              jwt-claims
              (into jwt-claims
                    (cond-> {"iat" issued-at
                             "nbf" not-before
                             "exp" access-token-expiry
                             "aud" resource-server
                             "sub" subject
                             "client_id" client-id}
                      username (assoc "username" username)))

              access-token
              (juxt.site/make-access-token
               jwt-claims
               (:juxt.site/keypair *resource*))

              access-token-doc
              (cond-> {:xt/id (str "https://auth.example.org/access-tokens/" (get jwt-claims "jti"))
                       :juxt.site/type "https://meta.juxt.site/types/access-token"
                       :juxt.site/subject subject
                       :juxt.site/issuer (get jwt-claims "issuer")
                       :juxt.site/issued-at issued-at
                       :juxt.site/not-before not-before
                       :juxt.site/expiry access-token-expiry
                       :juxt.site/audience resource-server
                       :juxt.site/application client-id
                       :juxt.site/token access-token
                       :juxt.site/keypair (:juxt.site/keypair *resource*)}
                scopes (assoc :juxt.site/scope scopes)
                username (assoc :juxt.site/username username))

              refresh-token-expires-in (java.time.Duration/parse "PT6H")
              refresh-token-expiry (java.util.Date/from (.plus now refresh-token-expires-in))

              refresh-token-doc
              (into access-token-doc
                    {:xt/id (str "https://auth.example.org/refresh-tokens/" refresh-token)
                     :juxt.site/type "https://meta.juxt.site/types/refresh-token"
                     :juxt.site/expiry refresh-token-expiry
                     :juxt.site/token refresh-token})]

          [[:xtdb.api/put access-token-doc issued-at access-token-expiry]
           [:xtdb.api/put refresh-token-doc issued-at refresh-token-expiry]
           [:ring.response/status 200]
           [:ring.response/headers
            (cond-> {"content-type" "application/json"
                     "cache-control" "no-store"
                     "pragma" "no-cache"}
              origin (assoc "access-control-allow-origin" origin
                            "access-control-allow-credentials" "true"))]
           [:ring.response/body
            (jsonista.core/write-value-as-string
             {"access_token" access-token
              "expires_in" (.getSeconds access-token-expires-in)
              "refresh_token" refresh-token})]])

        ;; TODO: Catch all exceptions too and implement appropriate
        ;; error handling
        (throw (ex-info "TODO: create and return error" {}))))}

   :juxt.site/rules
   [
    ;; Publicly available. This is often required to be accessible by
    ;; browser-based scripts, e.g. for the authorization code with
    ;; PKCE OAuth2 flow.
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
