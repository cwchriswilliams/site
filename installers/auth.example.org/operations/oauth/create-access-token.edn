;; TODO: Rename to 'issue-tokens' or similar. This does a lot more
;; than merely create an access token.
{:install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-id "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"

   :juxt.site.malli/input-schema
   [:or
    [:map
     ["grant_type" [:enum "authorization_code"]]
     ["code" :string]
     ;; TODO: Read https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3
     ["redirect_uri" {:optional true} :string]
     ["client_id" :string]
     ["code_verifier" {:optional true} :string]]
    [:map
     ["grant_type" [:enum "refresh_token"]]
     ["refresh_token" :string]
     ["scope" {:optional true} :string]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [input (:juxt.site/received-representation *ctx*)
          content-type (apply format "%s/%s"
                              ((juxt :juxt.reap.alpha.rfc7231/type
                                     :juxt.reap.alpha.rfc7231/subtype)
                               (:juxt.reap.alpha.rfc7231/content-type input)))



          ;; "The authorization server SHOULD document the size of any
          ;; value it issues." -- RFC 6749 Section 4.2.2
          jti-length 16

          {grant-type "grant_type" :as form}
          (case content-type
            "application/x-www-form-urlencoded"
            (some->
             input
             :juxt.http/body
             (String.)
             ring.util.codec/form-decode
             juxt.site.malli/validate-input))]

      (case grant-type

        "authorization_code"
        {:grant-type "authorization_code"
         :client-id (get form "client_id")
         :code (get form "code")
         :code-verifier (get form "code_verifier")
         :jwt-claims {"iss" "https://auth.example.org"
                      "jti" (juxt.site.util/make-nonce jti-length)}
         :new-refresh-token (juxt.site.util/make-nonce 16)}

        "refresh_token"
        {:grant-type "refresh_token"
         :refresh-token (get form "refresh_token")
         :scope (get form "scope")
         :jwt-claims {"iss" "https://auth.example.org"
                      "jti" (juxt.site.util/make-nonce jti-length)}
         :new-refresh-token (juxt.site.util/make-nonce 16)}))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [{:keys [grant-type jwt-claims new-refresh-token]} *prepare*
          error (fn [m] (throw (ex-info "Error" (assoc m :oauth-error true))))]

      (try
        (case grant-type
          "authorization_code"
          (let [{:keys [client-id code code-verifier scopes]} *prepare*

                {:juxt.site/keys [code-challenge code-challenge-method subject] :as code-doc}
                (juxt.site/lookup-authorization-code code)

                _ (when-not code-doc
                    (error {"error" "invalid_grant"
                            "error_description" "Code invalid or expired"}))

                verification
                (juxt.site/verify-authorization-code
                 {:code-verifier code-verifier
                  :code-challenge code-challenge
                  :code-challenge-method code-challenge-method})]

            (when-not (:verified? verification)
              (throw (ex-info "Not verified" {:code-verifier code-verifier
                                              :code-challenge code-challenge
                                              :code-challenge-method code-challenge-method
                                              :verification verification})))

            (let [[{:juxt.site/keys [origin resource-server]} & others] (juxt.site/lookup-client client-id)
                  _ (assert origin)
                  _ (assert resource-server)

                  now (java.time.Instant/now)
                  issued-at (java.util.Date/from now)
                  not-before (java.util.Date/from (.minus now 2 java.time.temporal.ChronoUnit/MINUTES))

                  ;; TODO: How to best make this configurable?
                  access-token-expires-in (java.time.Duration/parse "PT15M")
                  access-token-expiry (java.util.Date/from (.plus now access-token-expires-in))

                  username (some-> subject xt/entity :juxt.site/user-identity xt/entity :juxt.site/user xt/entity :username)

                  jwt-claims
                  (into jwt-claims
                        (cond-> {"iat" issued-at
                                 "nbf" not-before
                                 "exp" access-token-expiry
                                 "aud" resource-server
                                 "sub" subject
                                 "client_id" client-id}
                          username (assoc "username" username)))

                  access-token
                  (juxt.site/make-access-token
                   jwt-claims
                   (:juxt.site/keypair *resource*))

                  access-token-doc
                  (cond-> {:xt/id (str "https://auth.example.org/access-tokens/" (get jwt-claims "jti"))
                           :juxt.site/type "https://meta.juxt.site/types/access-token"
                           :juxt.site/subject subject
                           :juxt.site/issuer (get jwt-claims "issuer")
                           :juxt.site/issued-at issued-at
                           :juxt.site/not-before not-before
                           :juxt.site/expiry access-token-expiry
                           :juxt.site/audience resource-server
                           :juxt.site/application client-id
                           :juxt.site/token access-token
                           :juxt.site/keypair (:juxt.site/keypair *resource*)}
                    scopes (assoc :juxt.site/scope scopes)
                    username (assoc :juxt.site/username username))

                  refresh-token-expires-in (java.time.Duration/parse "PT6H")
                  refresh-token-expiry (java.util.Date/from (.plus now refresh-token-expires-in))

                  refresh-token-doc
                  (into {:xt/id (str "https://auth.example.org/refresh-tokens/" new-refresh-token)
                         :juxt.site/type "https://meta.juxt.site/types/refresh-token"
                         :juxt.site/expiry refresh-token-expiry
                         :juxt.site/token new-refresh-token}
                        (cond-> (select-keys
                                 access-token-doc
                                 [:juxt.site/subject
                                  :juxt.site/issuer
                                  :juxt.site/issued-at
                                  :juxt.site/application
                                  :juxt.site/keypair])
                          scopes (assoc :juxt.site/scope scopes)
                          username (assoc :juxt.site/username username)))]

              [[:xtdb.api/put access-token-doc issued-at access-token-expiry]
               [:xtdb.api/put refresh-token-doc issued-at refresh-token-expiry]
               [:ring.response/status 200]
               [:ring.response/headers
                (cond-> {"content-type" "application/json"
                         "cache-control" "no-store"
                         "pragma" "no-cache"}
                  origin (assoc "access-control-allow-origin" origin
                                ;; No longer require credentials
                                ;; "access-control-allow-credentials" "true"
                                ))]
               [:ring.response/body
                (jsonista.core/write-value-as-string
                 {"access_token" access-token
                  "expires_in" (.getSeconds access-token-expires-in)
                  "refresh_token" new-refresh-token})]]))

          "refresh_token"
          (if-let [{:juxt.site/keys [subject application keypair]} (juxt.site/lookup-refresh-token (:refresh-token *prepare*))]
            (let [client-id application ;; TODO: Consider a rename

                  [{:juxt.site/keys [origin resource-server]} & others] (juxt.site/lookup-client client-id)
                  _ (assert origin)
                  _ (assert resource-server)

                  now (java.time.Instant/now)
                  issued-at (java.util.Date/from now)
                  not-before (java.util.Date/from (.minus now 2 java.time.temporal.ChronoUnit/MINUTES))

                  access-token-expires-in (java.time.Duration/parse "PT15M")
                  access-token-expiry (java.util.Date/from (.plus now access-token-expires-in))

                  username (some-> subject xt/entity :juxt.site/user-identity xt/entity :juxt.site/user xt/entity :username)

                  jwt-claims
                  (into jwt-claims
                        (cond-> {"iat" issued-at
                                 "nbf" not-before
                                 "exp" access-token-expiry
                                 "aud" resource-server
                                 "sub" subject
                                 "client_id" client-id}
                          username (assoc "username" username)))

                  access-token
                  (juxt.site/make-access-token
                   jwt-claims
                   keypair)

                  access-token-doc
                  (cond-> {:xt/id (str "https://auth.example.org/access-tokens/" (get jwt-claims "jti"))
                           :juxt.site/type "https://meta.juxt.site/types/access-token"
                           :juxt.site/subject subject
                           :juxt.site/issuer (get jwt-claims "issuer")
                           :juxt.site/issued-at issued-at
                           :juxt.site/not-before not-before
                           :juxt.site/expiry access-token-expiry
                           :juxt.site/audience resource-server
                           :juxt.site/application client-id
                           :juxt.site/token access-token
                           :juxt.site/keypair keypair}
                    ;;scopes (assoc :juxt.site/scope scopes)
                    username (assoc :juxt.site/username username))

                  refresh-token-expires-in (java.time.Duration/parse "PT6H")
                  refresh-token-expiry (java.util.Date/from (.plus now refresh-token-expires-in))

                  refresh-token-doc
                  (into {:xt/id (str "https://auth.example.org/refresh-tokens/" new-refresh-token)
                         :juxt.site/type "https://meta.juxt.site/types/refresh-token"
                         :juxt.site/expiry refresh-token-expiry
                         :juxt.site/token new-refresh-token}
                        (cond-> (select-keys
                                 access-token-doc
                                 [:juxt.site/subject
                                  :juxt.site/issuer
                                  :juxt.site/issued-at
                                  :juxt.site/application
                                  :juxt.site/keypair])
                          ;;scopes (assoc :juxt.site/scope scopes)
                          username (assoc :juxt.site/username username)))]


              [[:xtdb.api/put access-token-doc issued-at access-token-expiry]
               [:xtdb.api/put refresh-token-doc issued-at refresh-token-expiry]
               ;; See https://www.rfc-editor.org/rfc/rfc6749#section-5.1
               [:ring.response/status 200]
               [:ring.response/headers
                (cond-> {"content-type" "application/json"
                         "cache-control" "no-store"
                         "pragma" "no-cache"}
                  origin (assoc "access-control-allow-origin" origin
                                ;; No longer require credentials
                                ;;"access-control-allow-credentials" "true"
                                ))]
               [:ring.response/body
                (jsonista.core/write-value-as-string
                 {"access_token" access-token
                  "expires_in" (.getSeconds access-token-expires-in)
                  "refresh_token" new-refresh-token})]])))

        (catch clojure.lang.ExceptionInfo error
          ;; TODO: This may be an attack. Log this?
          ;; TODO: Sanitize error description
          (let [ex-data (ex-data error)]
            (if (:oauth-error ex-data)
              [[:ring.response/status 400]
               [:ring.response/headers {"content-type" "application/json"
                                        "cache-control" "no-store"
                                        "pragma" "no-cache"}]
               [:ring.response/body
                ;; TODO: Add error_uri ? If so, ensure chars only in set
                ;; '%x21 / %x23-5B / %x5D-7E' as per
                ;; https://www.rfc-editor.org/rfc/rfc6749#section-5.2

                (let [{error "error" error-description "error_description"} ex-data]

                  (assert error)

                  ;; %x20-21 / %x23-5B / %x5D-7E
                  (when error-description
                    (assert (re-matches (re-pattern "[\\x20-\\x21\\x23-\\x5B\\x5D-\\x7E]+") error-description)))

                  (jsonista.core/write-value-as-string
                   (select-keys ex-data ["error" "error_description"])))]]

              ;; Pass through if not a recognized error
              (throw error))))))}

   :juxt.site/rules
   [
    ;; Publicly available. This is often required to be accessible by
    ;; browser-based scripts, e.g. for the authorization code with
    ;; PKCE OAuth2 flow.
    [(allowed? subject operation resource permission)
     [permission :xt/id]]]}}}
