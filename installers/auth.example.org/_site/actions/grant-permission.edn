{:deps
 ["https://auth.example.org/_site/do-action"
  "https://auth.example.org/_site/subjects/system"
  "https://auth.example.org/_site/actions/create-action"
  "https://auth.example.org/_site/permissions/system/bootstrap"]
 :install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/action-id "https://auth.example.org/_site/actions/create-action"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/type "https://meta.juxt.site/types/action"

   :juxt.site.malli/input-schema
   [:map
    ;; Our only constraint is that we always want the action to be in a
    ;; /permissions/ context somewhere in the path (not necessarily at the root).
    [:xt/id [:re "https://.*?/permissions/.+"]]
    [:juxt.site/action [:re "https://.*?/actions/.+"]]
    [:juxt.site/purpose [:maybe :string]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)]
      (case content-type
        "application/edn"
        (some->
         body
         (String.)
         clojure.edn/read-string
         juxt.site.malli/validate-input
         (assoc :juxt.site/type "https://meta.juxt.site/types/permission"))))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    [[:xtdb.api/put *prepare*]]}

   :juxt.site/rules
   [
    [(allowed? subject action resource permission)
     [permission :juxt.site/subject subject]]

    ;; This might be overly powerful, as a general way of granting anyone a
    ;; permission on any action! Let's comment for now
    #_[(allowed? subject action resource permission)
       [subject :juxt.site/user-identity id]
       [id :juxt.site/user user]
       [user :role role]
       [permission :role role]]]}}
 }
