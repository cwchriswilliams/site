{:create
 {:juxt.site/subject-id "https://example.org/subjects/system"
  :juxt.site/action-id "https://example.org/actions/create-action"
  :juxt.site/input
  {:xt/id "https://example.org/hospital/actions/register-patient"

   :juxt.site.malli/input-schema
   [:map
    [:xt/id [:re "https://example.org/hospital/patients/.*"]]
    [:name [:string {:min 3}]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)]
      (case content-type
        "application/edn"
        (let [input
              (some->
               body
               (String.)
               clojure.edn/read-string
               juxt.site.malli/validate-input
               (assoc
                :juxt.site/type "https://example.org/hospital/types/patient"
                :juxt.site/protection-spaces #{"https://example.org/protection-spaces/bearer"}
                :juxt.site/methods
                {:get {:juxt.site/actions #{"https://example.org/hospital/actions/get-patient"}}
                 :head {:juxt.site/actions #{"https://example.org/hospital/actions/get-patient"}}
                 :options {}}))]
          (assoc input
                 :juxt.http/content-type "application/json"
                 :juxt.http/content (jsonista.core/write-value-as-string {"name" (:name input)})))))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    [[:xtdb.api/put *prepare*]]}

   :juxt.site/rules
   [
    [(allowed? subject resource permission)
     [permission :juxt.site/subject subject]]]}}}
