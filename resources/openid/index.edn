{:xt/id "https://example.org/packages/openid"
 :description "OpenID Connect"

 :uri-map [["https://example.org" {:description "Host of the OpenID client"}]
           ["https://core.example.org" {:description "Host of the Site core actions"}]]

 :dependencies ["https://core.example.org/packages/core"]

 :resources
 ["https://example.org/actions/openid/exchange-code-for-id-token"
  "https://example.org/actions/register-openid-issuer"
  "https://example.org/actions/register-openid-client"
  "https://example.org/permissions/system/register-openid-issuer"
  "https://example.org/permissions/system/register-openid-client"]

 :commands
 {:openid/register-issuer
  {:description "Register an OpenID issuer"
   :arguments [["iss" {:description "Issuer URL" :default [:juxt.site/issuer]}]]
   :juxt.site.sci/program
   #juxt.pprint
   (converge! [(format "https://example.org/openid/issuers/%s" (ring.util.codec/url-encode (get *args* "iss")))])}

  :openid/register-client
  {:description "Register an OpenID client"
   :arguments
   [["iss" {:description "Issuer URL"}]
    ["client-id" {:description "Client id"}]
    ["client-secret" {:description "Client secret"}]]

   :juxt.site.sci/program
   #juxt.pprint
   (do
     (assert (get *args* "iss") "iss (issuer) not given")
     (assert (get *args* "client-id") "client-id not given")
     (assert (get *args* "client-secret") "client-secret not given")
     (converge!
      [(format "https://example.org/openid/clients/%s" (ring.util.codec/url-encode (get *args* "client-id")))
       "https://example.org/openid/login"
       "https://example.org/openid/callback"]
      (assoc *args*
             "issuer-configuration"
             (format "https://example.org/openid/issuers/%s" (ring.util.codec/url-encode (get *args* "iss")))
             "client-configuration"
             (format "https://example.org/openid/clients/%s" (get *args* "client-id")))))}}}
