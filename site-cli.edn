; See https://book.babashka.org/#tasks
{:min-bb-version "0.6.2"
 :paths ["src"]
 :deps {io.github.lispyclouds/bblgum {:git/sha "7ebae0e2231899fe2a6ad44bc9ef5fca64099fcd"}
        org.babashka/cli {:mvn/version "0.4.39"}
        juxt.site/installer-graph {:local/root "installer-graph"}
        aero/aero {:mvn/version "1.1.6"}}

 :tasks
 {:requires (juxt.site.bb.tasks
             [clojure.core.async :as async]
             [clojure.edn :as edn]
             [clojure.java.io :as io])

  ;; Override bb's help
  help
  {:doc "Show help"
   :task (juxt.site.bb.tasks/help)}

  ping
  {:doc "Check server health"
   :task (juxt.site.bb.tasks/ping)}

  reset {:doc "Admin only: Reset"
         :task (juxt.site.bb.tasks/reset)}

  init {:doc "Initialise a server with a minimal working set of resources"
        :task (juxt.site.bb.tasks/init
               (juxt.site.bb.tasks/parse-opts))}

  list
  {:doc "List resources"
   :opts {:args->opts [:pattern]}
   :task (juxt.site.bb.tasks/list-task)}

  find
  {:doc "Show resource"
   :opts {:args->opts [:pattern]
          :coerce {:pattern :string}}
   :task (juxt.site.bb.tasks/find)}

  client-secret
  {:doc "Retrieve a client_secret"
   :opts {:args->opts [:client-id]
          :require [:client-id]
          :coerce {:save :boolean}
          :exec-args {:client-id "site-cli"}}
   :task (juxt.site.bb.tasks/print-or-save-client-secret
          (juxt.site.bb.tasks/parse-opts))}

  forget-client-secret
  {:doc "Forget the client_secret for site-cli"
   :opts {:args->opts [:client-id]
          :require [:client-id]
          :exec-args {:client-id "site-cli"}}
   :task (juxt.site.bb.tasks/forget-client-secret)}

  ;; Client

  config-file
  {:doc "Show configuration-file"
   :task (juxt.site.bb.tasks/config-file-task)}

  config
  {:doc "Show configuration"
   :opts {:require [:format]
          :exec-args {:format "edn"}
          :alias {:f :format}}
   :task (juxt.site.bb.tasks/config-task)}

  profile
  {:doc "Show profile"
   :opts {}
   :task (juxt.site.bb.tasks/profile-task)}

  request-token
  {:doc "Acquire an access token"
   :opts {:require [:client-id]
          :exec-args {:client-id "site-cli"}}
   :task (juxt.site.bb.tasks/request-token-task
          (juxt.site.bb.tasks/parse-opts))}

  check-token
  {:doc "Show current token"
   :task (juxt.site.bb.tasks/check-token)}

  whoami
  {:doc "Introspect current user/application"
   :opts {:coerce {:verbose :boolean}
          :alias {:v :verbose}}
   :task (juxt.site.bb.tasks/whoami
          (juxt.site.bb.tasks/parse-opts))}

  register-user
  {:doc "Register a user"
   :opts {:require [:username]}
   :task (juxt.site.bb.tasks/register-user
          (juxt.site.bb.tasks/parse-opts))}

  assign-user-role
  {:doc "Assign a user a role"
   :opts {:require [:username :role]}
   :task (juxt.site.bb.tasks/assign-user-role
          (juxt.site.bb.tasks/parse-opts))}

  users
  {:doc "Show current users"
   :opts {:args->opts [:pattern]}
   :task (juxt.site.bb.tasks/users)}

  new-keypair
  {:doc "Create a new keypair"
   :task (juxt.site.bb.tasks/new-keypair)}

  bundle
  {:doc "Stream a bundle to stdout"
   :opts {:args->opts [:bundle]
          :alias {:o :outfile}}

   :task (juxt.site.bb.tasks/bundle
          (juxt.site.bb.tasks/parse-opts))}

  install
  {:doc "Install bundle"
   :opts {:args->opts [:bundle]}
   :task (juxt.site.bb.tasks/install-bundle-task
          (juxt.site.bb.tasks/parse-opts))}

  api-endpoints
  {:doc "List available API endpoints"
   :opts {:args->opts [:pattern]}
   :task (juxt.site.bb.tasks/api-endpoints)}}}
