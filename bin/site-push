#_( ;; Allow this script to be executed directly
   "exec" "bb" "--classpath" "$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "1.1"}}}')" "$0" "$(readlink -f $(dirname $0)/..)" "$@"
   )

;; Copyright Â© 2021, JUXT LTD.

(ns site-push
  (:require
   [babashka.cli :as cli]
   [clojure.java.io :as io]
   [clojure.pprint :refer [pprint]]
   [clojure.edn :as edn]))

(defn read-line* [r]
  (loop [c (.read r)
         sb (java.lang.StringBuilder.)]
    (case c
      -1 (let [res (.toString sb)]
           (when (empty? res) res))
      10 (.toString sb)
      (recur (.read r) (doto sb (.append (char c)))))))

(defn read-object [r]
  (binding [*read-eval* false]
    (read r)))

(defn slurp-prompt [r]
  (let [prompt (read-object r)]
    (when-not (= 'site> prompt)
      (throw (ex-info "Unexpected prompt" {:prompt prompt})))))

(def opts
  (cli/parse-opts
   *command-line-args*
   {:alias {:p :port
            :h :host
            :e :expr}
    :require [:expr]
    :coerce {:port :long}
    :exec-args {:host "localhost"
                :port 50505}}))

(let [s (java.net.Socket. (:host opts) (:port opts))
      writer (io/writer (.getOutputStream s))
      reader (java.io.PushbackReader. (java.io.InputStreamReader. (.getInputStream s)))
      copyright-banner (read-line* reader)
      _ (assert (re-matches #"Site by JUXT. Copyright.*" copyright-banner))
      help-message (read-line* reader)
      _ (assert (re-matches #"Type :quit to exit, :help for help." help-message))]

  (slurp-prompt reader)

  (binding [*out* writer]
    (println (:expr opts))
    (println :quit))

  (let [result (edn/read
                {:readers
                 {'error (fn [x] x)
                  'volatile (fn [x] (:val (first x)))}}
                reader)]
    (pprint result)
    (if (:error result)
      (System/exit 1)
      (System/exit 0))))

;; Local Variables:
;; mode: clojure
;; End:
