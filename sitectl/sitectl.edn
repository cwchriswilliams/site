;; See https://book.babashka.org/#tasks
{:min-bb-version "0.6.2"
 :paths ["src"]
 :deps {io.github.lispyclouds/bblgum {:git/sha "7ebae0e2231899fe2a6ad44bc9ef5fca64099fcd"}
        org.babashka/cli {:mvn/version "0.4.39"}
        juxt.site/installer-graph {:local/root "../installer-graph"}}
 :tasks
 {:requires (juxt.site.bb.bootstrap.tasks
             [clojure.core.async :as async]
             [clojure.edn :as edn]
             [clojure.java.io :as io]
             [babashka.cli :as cli])

  reset
  {:doc "Factory reset"
   :task (juxt.site.bb.bootstrap.tasks/reset
          (cli/parse-opts *command-line-args* {}))}

  ls {:task (juxt.site.bb.bootstrap.tasks/ls)}
  ls-site-type {:task (juxt.site.bb.bootstrap.tasks/ls-site-type (first *command-line-args*))}

  users {:task (juxt.site.bb.bootstrap.tasks/ls-site-type "user")}
  access-tokens {:task (juxt.site.bb.bootstrap.tasks/ls-site-type "access-token")}

  install-group {:task (-> (cli/parse-opts
                            *command-line-args*
                            {:args->opts [:group]
                             :validate {:group {:pred string?}}})
                           juxt.site.bb.bootstrap.tasks/add-base-uris
                           juxt.site.bb.bootstrap.tasks/install-group)}

  new-keypair {:task (-> {}
                         juxt.site.bb.bootstrap.tasks/add-base-uris
                         juxt.site.bb.bootstrap.tasks/new-keypair)}

  client-secret {:task (-> (cli/parse-opts
                            *command-line-args*
                            {:args->opts [:client-id]
                             :require [:client-id]
                             :coerce {:save :boolean}
                             :validate {:client-id {:pred string?}}})
                           juxt.site.bb.bootstrap.tasks/add-base-uris
                           juxt.site.bb.bootstrap.tasks/client-secret)}

  zip {:task (-> (cli/parse-opts
                  *command-line-args*
                  {:args->opts [:group]
                   :require [:group :outfile]
                   :validate {:group {:pred string?}
                              :outfile {:pred string?}}
                   :alias {:o :outfile}})
                 juxt.site.bb.bootstrap.tasks/add-base-uris
                 juxt.site.bb.bootstrap.tasks/zip)}

  apply
  {:task
   (let [spec {:alias {:c :config
                       :a :no-confirm}
               :require [:config]
               :coerce {:config (fn [x] (when x (io/file x)))}
               :validate {:config {:pred (fn [x] (when x (.exists x)))
                                   :ex-msg (fn [x] (format "File must exist: %s" x))}}}
         {config-file :config
          no-confirm :no-confirm}
         (cli/parse-opts *command-line-args* spec)

         config (edn/read-string (slurp config-file))]

     (binding [juxt.site.bb.bootstrap.tasks/*no-confirm* no-confirm]
       (doseq [[task-kw args] config
               :let [task (ns-resolve 'juxt.site.bb.bootstrap.tasks (symbol task-kw))
                     args (juxt.site.bb.bootstrap.tasks/add-base-uris args)]]
         (task args))))}}}
