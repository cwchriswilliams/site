;; Copyright © 2022, JUXT LTD.

(ns juxt.book
  (:require
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [ring.util.codec :as codec]
   [jsonista.core :as json]
   juxt.book.login
   [juxt.site.session-scope :as session-scope]
   [juxt.site.oauth :as oauth]
   [juxt.site.form-based-auth :as form-based-auth]
   [juxt.site.basic-auth :as basic-auth]
   [juxt.flip.alpha.core :as f]
   [juxt.site.alpha.graphql.flip :as graphql-flip]
   [juxt.site.alpha.util :refer [make-nonce]]
   [juxt.site.alpha :as-alias site]
   [juxt.http.alpha :as-alias http]
   [juxt.site.alpha.init :as init :refer [substitute-actual-base-uri]]
   [juxt.test.util :refer [*handler* assoc-body]]
   [malli.core :as malli]
   [clojure.string :as str]))

(comment
  ;; tag::example-operation[]
  {:xt/id "https://example.org/example/feed-cat"
   :juxt.site.alpha/type "https://meta.juxt.site/pass/operation" ; <1>
   :juxt.site.alpha/rules                                     ; <2>
   [
    '[(allowed? subject operation resource permission) …]
    ]
   :juxt.site.alpha/transact
   {:juxt.flip.alpha/quotation '(…)}      ; <3>
   }
  ;; end::example-operation[]
  )

;; Hello World!

(defn create-operation-put-immutable-public-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-operation-put-immutable-public-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/put-immutable-public-resource"

       :juxt.site.alpha/transact
       {:juxt.flip.alpha/quotation
        `(
          (site/with-fx-acc
            [(site/push-fx
              (f/dip
               [juxt.site.alpha/request-body-as-edn

                (site/validate
                 [:map
                  [:xt/id [:re "https://example.org/(.+)"]]])

                (site/set-methods ; <2>
                 {:get {:juxt.site.alpha/operations #{"https://example.org/operations/get-public-resource"}}
                  :head {:juxt.site.alpha/operations #{"https://example.org/operations/get-public-resource"}}
                  :options {:juxt.site.alpha/operations #{"https://example.org/operations/get-options"}}})

                xtdb.api/put]))]))}

       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [permission :juxt.site.alpha/subject subject]]

         [(allowed? subject operation resource permission) ; <3>
          [subject :juxt.site.alpha/user-identity id]
          [id :juxt.site.alpha/user user]
          [user :role role]
          [permission :role role]]]})
     ;; end::create-operation-put-immutable-public-resource![]
     ))))

(defn grant-permission-to-invoke-operation-put-immutable-public-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-invoke-operation-put-immutable-public-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/system/put-immutable-public-resource"
       :juxt.site.alpha/subject "https://example.org/_site/subjects/system"
       :juxt.site.alpha/operation "https://example.org/operations/put-immutable-public-resource"
       :juxt.site.alpha/purpose nil})
     ;; end::grant-permission-to-invoke-operation-put-immutable-public-resource![]
     ))))

(defn create-operation-get-public-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-operation-get-public-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/get-public-resource"

       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [permission :xt/id "https://example.org/permissions/public-resources-to-all"] ; <2>
          ]]})
     ;; end::create-operation-get-public-resource![]
     ))))

(defn grant-permission-to-invoke-get-public-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-invoke-get-public-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/public-resources-to-all"
       :juxt.site.alpha/operation "https://example.org/operations/get-public-resource"
       :juxt.site.alpha/purpose nil})
     ;; end::grant-permission-to-invoke-get-public-resource![]
     ))))

(defn create-hello-world-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-hello-world-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-public-resource"
      {:xt/id "https://example.org/hello"
       :juxt.http.alpha/content-type "text/plain"
       :juxt.http.alpha/content "Hello World!\r\n"})
     ;; end::create-hello-world-resource![]
     ))))

;; Representations

(defn create-hello-world-html-representation! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-hello-world-html-representation![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-public-resource"
      {:xt/id "https://example.org/hello.html"                 ; <1>
       :juxt.http.alpha/content-type "text/html;charset=utf-8" ; <2>
       :juxt.http.alpha/content "<h1>Hello World!</h1>\r\n"    ; <3>
       :juxt.site.alpha/variant-of "https://example.org/hello" ; <4>
       })
     ;; end::create-hello-world-html-representation![]
     ))))

(defn grant-permission-to-invoke-operation-put-template! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-invoke-operation-put-template![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/alice/put-template"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/operation #{"https://example.org/operations/put-template"}
       :juxt.site.alpha/purpose nil})
     ;; end::grant-permission-to-invoke-operation-put-template![]
     ))))

(defn create-hello-world-html-template! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-hello-world-html-template![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-template"
      {:xt/id "https://example.org/templates/hello.html"
       :juxt.http.alpha/content-type "text/html;charset=utf-8"
       :juxt.http.alpha/content "<h1>Hello {audience}!</h1>\r\n"})
     ;; end::create-hello-world-html-template![]
     ))))

(defn create-hello-world-with-html-template! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-hello-world-with-html-template![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-public-resource"
      {:xt/id "https://example.org/hello-with-template.html"
       :juxt.site.alpha/template "https://example.org/templates/hello.html"
       })
     ;; end::create-hello-world-with-html-template![]
     ))))

;; Protecting Resources

(defn create-operation-put-immutable-protected-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-operation-put-immutable-protected-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/put-immutable-protected-resource"

       :juxt.site.alpha/transact
       {:juxt.flip.alpha/quotation
        `(
          (site/with-fx-acc
            [(site/push-fx
              (f/dip
               [juxt.site.alpha/request-body-as-edn

                (site/validate
                 [:map
                  [:xt/id [:re "https://example.org/(.+)"]]])

                (site/set-methods ; <2>
                 {:get {:juxt.site.alpha/operations #{"https://example.org/operations/get-protected-resource"}}
                  :head {:juxt.site.alpha/operations #{"https://example.org/operations/get-protected-resource"}}
                  :options {:juxt.site.alpha/operations #{"https://example.org/operations/get-options"}}})

                xtdb.api/put
                ]))]))}

       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [permission :juxt.site.alpha/subject subject]]

         [(allowed? subject operation resource permission) ; <3>
          [subject :juxt.site.alpha/user-identity id]
          [id :juxt.site.alpha/user user]
          [permission :role role]
          [user :role role]]]})
     ;; end::create-operation-put-immutable-protected-resource![]
     ))))

(defn grant-permission-to-put-immutable-protected-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-put-immutable-protected-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/system/put-immutable-protected-resource"
       :juxt.site.alpha/subject "https://example.org/_site/subjects/system"
       :juxt.site.alpha/operation "https://example.org/operations/put-immutable-protected-resource"
       :juxt.site.alpha/purpose nil})
     ;; end::grant-permission-to-put-immutable-protected-resource![]
     ))))

(defn create-operation-get-protected-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-operation-get-protected-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/get-protected-resource"

       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [subject :juxt.site.alpha/user-identity id]
          [id :juxt.site.alpha/user user]
          [permission :juxt.site.alpha/user user]    ; <1>
          [permission :juxt.site.alpha/uri resource] ; <2>
          ]]})
     ;; end::create-operation-get-protected-resource![]
     ))))

;; HTTP Basic Auth

(defn create-resource-protected-by-basic-auth! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-resource-protected-by-basic-auth![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-protected-resource"
      {:xt/id "https://example.org/protected-by-basic-auth/document.html"
       :juxt.http.alpha/content-type "text/html;charset=utf-8"
       :juxt.http.alpha/content "<p>This is a protected message that those authorized are allowed to read.</p>"
       ;; TODO: Will need to explicitly refer to a protection space otherwise
       ;; this won't work
       })
     ;; end::create-resource-protected-by-basic-auth![]
     ))))

(defn grant-permission-to-resource-protected-by-basic-auth! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-resource-protected-by-basic-auth![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/alice/protected-by-basic-auth/document.html"
       :juxt.site.alpha/operation "https://example.org/operations/get-protected-resource"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/uri "https://example.org/protected-by-basic-auth/document.html"
       :juxt.site.alpha/purpose nil
       })
     ;; end::grant-permission-to-resource-protected-by-basic-auth![]
     ))))

;; HTTP Bearer Auth

(defn create-resource-protected-by-bearer-auth! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-resource-protected-by-bearer-auth![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-protected-resource"
      {:xt/id "https://example.org/protected-by-bearer-auth/document.html"
       :juxt.http.alpha/content-type "text/html;charset=utf-8"
       :juxt.http.alpha/content "<p>This is a protected message that those authorized are allowed to read.</p>"
       })
     ;; end::create-resource-protected-by-bearer-auth![]
     ))))

(defn grant-permission-to-resource-protected-by-bearer-auth! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-resource-protected-by-bearer-auth![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/alice/protected-by-bearer-auth/document.html"
       :juxt.site.alpha/operation "https://example.org/operations/get-protected-resource"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/uri "https://example.org/protected-by-bearer-auth/document.html"
       :juxt.site.alpha/purpose nil
       })
     ;; end::grant-permission-to-resource-protected-by-bearer-auth![]
     ))))

(defn put-bearer-protection-space! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-protection-space"
      {:xt/id "https://example.org/protection-spaces/bearer/wonderland"

       :juxt.site.alpha/canonical-root-uri "https://example.org"
       :juxt.site.alpha/realm "Wonderland" ; optional

       :juxt.site.alpha/auth-scheme "Bearer"})))))

;; Session Scope Example

(defn create-resource-protected-by-session-scope! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::create-resource-protected-by-session-scope![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-protected-resource"
      {:xt/id "https://example.org/protected-by-session-scope/document.html"
       :juxt.http.alpha/content-type "text/html;charset=utf-8"
       :juxt.http.alpha/content "<p>This is a protected message that is only visible when sending the correct session header.</p>"
       })
     ;; end::create-resource-protected-by-session-scope![]
     ))))

(defn grant-permission-to-resource-protected-by-session-scope! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-resource-protected-by-session-scope![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/alice/protected-by-session-scope/document.html"
       :juxt.site.alpha/operation "https://example.org/operations/get-protected-resource"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/uri "https://example.org/protected-by-session-scope/document.html"
       :juxt.site.alpha/purpose nil
       })
     ;; end::grant-permission-to-resource-protected-by-session-scope![]
     ))))

(defn create-internal-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-protected-resource"
      {:xt/id "https://example.org/private/internal.html"
       :juxt.http.alpha/content-type "text/plain"
       :juxt.http.alpha/content "Internal message"})))))

(defn grant-alice-permission-to-internal-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/alice/private/internal.html"
       :juxt.site.alpha/operation "https://example.org/operations/get-protected-resource"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/uri "https://example.org/private/internal.html"
       :juxt.site.alpha/purpose nil})))))

;; GraphQL

;; Someone who has permission to perform the install-graphql-endpoint operation can
;; put a GraphQL schema wherever the granted permission allows.
(defn create-operation-install-graphql-endpoint! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/install-graphql-endpoint"

       :juxt.site.alpha/scope "https://example.org/oauth/scope/graphql/administer"

       :juxt.site.alpha/methods
       {
        ;; As this is an 'installer' actions, we expose this operation.
        :post {:juxt.site.alpha/operations #{"https://example.org/operations/install-graphql-endpoint"}}
        ;; (the default operation of an operation resource is itself.)
        }

       :juxt.site.alpha/transact
       {:juxt.flip.alpha/quotation
        `(
          (f/define extract-input
            [(f/set-at
              (f/dip
               [site/request-body-as-edn
                (site/validate [:map {:closed true}
                                [:xt/id [:re "https://example.org/.*"]]])
                :input]))])

          (f/define extract-permissions
            [(f/set-at (f/dip [(f/env :juxt.site.alpha/permissions) :permissions]))])

          (f/define determine-if-match-resource-pattern
            ;; We check that the permission resource matches the xt/id
            [(f/set-at
              (f/keep
               [f/dup (f/of :input) (f/of :xt/id) f/swap (f/of :permissions)
                (f/any? [(f/of :juxt.site.alpha/resource-pattern) f/<regex> f/matches?])
                f/nip :matches?]))])

          (f/define throw-if-not-match
            [(f/keep
              [f/dup
               (f/of :matches?)
               (f/if
                   [f/drop]
                 [(f/throw-exception
                   (f/ex-info
                    f/dup "No permission allows installation of GraphQL endpoint: " f/swap (f/of :input) (f/of :xt/id) f/swap f/str
                    f/swap (f/of :input) (f/of :xt/id) :location {:ring.response/status 403} f/set-at))])])])

          (f/define create-resource
            [(f/set-at
              (f/keep
               [(f/of :input)
                (site/set-methods
                 {:get {:juxt.site.alpha/operations #{"https://example.org/operations/get-graphql-schema"}}
                  :put {:juxt.site.alpha/operations #{"https://example.org/operations/put-graphql-schema"}
                        :juxt.site.alpha/acceptable {"accept" "application/graphql"}}
                  :post {:juxt.site.alpha/operations #{"https://example.org/operations/graphql-request"}}})
                (f/set-at (f/dip ["https://meta.juxt.site/site/graphql-endpoint" :juxt.site.alpha/type]))
                (f/set-at (f/dip ["GraphQL endpoint" :juxt.site.alpha/description]))
                :new-resource]))])

          (f/define extract-owner
            [(f/set-at
              (f/dip
               [(f/env :juxt.site.alpha/subject) (f/of :juxt.site.alpha/user-identity) site/entity
                (f/of :juxt.site.alpha/user)
                :owner]))])

          (f/define add-owner
            [(f/set-at
              (f/keep
               [f/dup (f/of :new-resource)
                f/swap (f/of :owner) :juxt.site.alpha/owner f/rot f/set-at
                :new-resource]))])

          (f/define push-resource
            [(site/push-fx
              (f/keep
               [(f/of :new-resource)
                xtdb.api/put]))])

          (f/define push-permission
            [(site/push-fx
              (f/keep
               [(f/of :new-permission)
                xtdb.api/put]))])

          (f/define configure-response
            [(site/push-fx (f/dip [(site/set-status 201)]))
             (site/push-fx (f/keep [(site/set-header "location" f/swap (f/of :input) (f/of :xt/id))]))])

          (f/define create-permission
            [(f/set-at
              (f/dip
               [{:juxt.site.alpha/type "https://meta.juxt.site/pass/permission"
                 :juxt.site.alpha/description "Permission for endpoint owner to put GraphQL schema"
                 :juxt.site.alpha/operation "https://example.org/operations/put-graphql-schema"
                 :juxt.site.alpha/purpose nil}
                :new-permission]))])

          (site/with-fx-acc
            [extract-input

             extract-permissions
             determine-if-match-resource-pattern
             throw-if-not-match

             create-resource
             extract-owner
             add-owner
             push-resource

             create-permission

             ;; Set new-permission to owner
             ;; TODO: Need some kind of 'update' combinator for this common operation
             (f/set-at
              (f/keep
               [f/dup (f/of :new-permission) f/swap
                (f/of :owner) :juxt.site.alpha/user f/rot f/set-at :new-permission]))

             ;; Set xt/id
             (f/set-at
              (f/keep
               [(f/of :new-permission)
                (pass/make-nonce 10)
                "https://example.org/permissions/"
                f/str
                :xt/id
                f/rot f/set-at :new-permission]))

             push-permission

             configure-response]))}

       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [subject :juxt.site.alpha/user-identity id]
          [id :juxt.site.alpha/user user]
          [permission :juxt.site.alpha/user user]]]})))))

(defn grant-permission-install-graphql-endpoint-to-alice! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      ;; TODO: We need a specialist grant-permission for this because we want to documnent/validate the :juxt.site.alpha/resource-pattern
      {:xt/id "https://example.org/permissions/alice/install-graphql-endpoint"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/operation "https://example.org/operations/install-graphql-endpoint"
       ;; This permission can restrict exactly where a GraphQL endpoint can be
       ;; installed.
       :juxt.site.alpha/resource-pattern "\\Qhttps://example.org/graphql\\E"
       :juxt.site.alpha/purpose nil})))))

(defn create-operation-put-graphql-schema [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/put-graphql-schema"

       :juxt.site.alpha/scope "https://example.org/oauth/scope/graphql/develop"

       ;; TODO: This is required to compile the GraphQL schema and communicate
       ;; any schema validation or compilation errors. Perhaps this can be done
       ;; with a custom word.
       :juxt.site.alpha/transact
       {:juxt.flip.alpha/quotation
        `(
          (f/define ^{:f/stack-effect '[ctx -- ctx]} extract-input
            [(f/set-at
              (f/dip
               [site/request-body-as-string
                :input]))])

          (f/define ^{:f/stack-effect '[ctx -- ctx]} compile-input-to-schema
            [(f/set-at
              (f/keep
               [(f/of :input)
                graphql-flip/compile-schema
                :compiled-schema]))])

          (f/define ^{:f/stack-effect '[ctx key -- ctx]} update-base-resource
            [(f/dip
              [(f/env :juxt.site.alpha/resource)
               (f/set-at (f/dip [f/dup (f/of :input) :juxt.http.alpha/content]))
               (f/set-at (f/dip ["application/graphql" :juxt.http.alpha/content-type]))
               (f/set-at (f/dip [f/dup (f/of :compiled-schema) :juxt.site.alpha/graphql-compiled-schema]))])
             f/rot
             f/set-at])

          (f/define ^{:f/stack-effect '[ctx key -- ctx]} create-edn-resource
            [(f/dip
              ;; Perhaps could we use a template with eval-embedded-quotations?
              [{}
               (f/set-at (f/dip ["application/edn" :juxt.http.alpha/content-type]))
               (f/set-at (f/dip [(f/env :juxt.site.alpha/resource) (f/of :xt/id) ".edn" f/swap f/str :xt/id]))
               (f/set-at (f/dip [(f/env :juxt.site.alpha/resource) (f/of :xt/id) :juxt.site.alpha/variant-of]))
               (f/set-at (f/dip [f/dup (f/of :compiled-schema) f/pr-str :juxt.http.alpha/content]))])
             f/rot
             f/set-at])

          (f/define ^{:f/stack-effect '[ctx key -- ctx]} push-resource
            [(f/push-at
              (xtdb.api/put
               f/dupd
               f/of
               (f/unless* [(f/throw-exception (f/ex-info "No object to push as an fx" {}))]))
              :juxt.site.alpha/fx
              f/rot)])

          (f/define ^{:f/stack-effect '[ctx -- ctx]} determine-status
            [(f/of (f/env :juxt.site.alpha/resource) :juxt.http.alpha/content)
             [200 :status f/rot f/set-at]
             [201 :status f/rot f/set-at]
             f/if])

          (site/with-fx-acc ;;-with-checks - adding -with-checks somehow messes things up! :(
            [
             ;; The following can be done in advance of the fx-fn.
             extract-input
             compile-input-to-schema

             ;; The remainder would need to be done in the tx-fn because it looks
             ;; up the /graphql resource in order to update it.
             (update-base-resource :new-resource)
             (push-resource :new-resource)

             ;; The application/edn resource serves the compiled version
             (create-edn-resource :edn-resource)
             (push-resource :edn-resource)

             ;; Return a 201 if there is no existing schema, 200 otherwise
             determine-status
             (site/set-status f/dup (f/of :status))
             f/swap
             site/push-fx
             ]))}

       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [subject :juxt.site.alpha/user-identity id]
          [id :juxt.site.alpha/user user]
          [permission :juxt.site.alpha/user user]]]})))))

(defn grant-permission-put-graphql-schema-to-alice! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      ;; TODO: We need a specialist grant-permission for this because we want to
      ;; documnent/validate the :juxt.site.alpha/resource
      {:xt/id "https://example.org/permissions/alice/put-graphql-schema"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/operation "https://example.org/operations/put-graphql-schema"
       :juxt.site.alpha/purpose nil
       :juxt.site.alpha/resource "https://example.org/graphql"})))))

(defn grant-permission-get-graphql-schema-to-alice! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      ;; TODO: We need a specialist grant-permission for this because we want to
      ;; documnent/validate the :juxt.site.alpha/resource
      {:xt/id "https://example.org/permissions/alice/get-graphql-schema"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/operation "https://example.org/operations/get-graphql-schema"
       :juxt.site.alpha/purpose nil
       :juxt.site.alpha/resource "https://example.org/graphql"})))))

(defn create-operation-get-graphql-schema [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/get-graphql-schema"
       :juxt.site.alpha/scope "https://example.org/oauth/scope/graphql/develop"
       #_:juxt.site.alpha/transact
       #_{:juxt.site.alpha.sci/program
          (pr-str
           '(do
              ;; Note: This logic has only been added here as a workaround.
              ;; The problem is we need the OAuth2 login handler not to trigger a 404
              (if-let [selected-representation (:juxt.site.alpha/selected-representation *ctx*)]
                [[:continue]]
                [[:ring.response/status 404]])))}
       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [subject :juxt.site.alpha/user-identity id]
          [id :juxt.site.alpha/user user]
          [permission :juxt.site.alpha/user user]]]})))))

(defn create-operation-graphql-request [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/graphql-request"
       :juxt.site.alpha/transact
       {:juxt.flip.alpha/quotation `()}
       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [permission :xt/id "https://example.org/permissions/graphql-access-to-known-subjects"]
          [subject :xt/id]]]})))))

(defn grant-permission-graphql-request-to-known-subjects [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/graphql-access-to-known-subjects"
       :juxt.site.alpha/operation "https://example.org/operations/graphql-request"
       :juxt.site.alpha/purpose nil})))))

;; Other stuff

(defn grant-permission-to-put-error-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::grant-permission-to-put-error-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/alice/put-error-resource"
       :juxt.site.alpha/user "https://example.org/users/alice"
       :juxt.site.alpha/operation #{"https://example.org/operations/put-error-resource"}
       :juxt.site.alpha/purpose nil})
     ;; end::grant-permission-to-put-error-resource![]
     ))))

(defn put-unauthorized-error-resource! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::put-unauthorized-error-resource![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-error-resource"
      {:xt/id "https://example.org/_site/errors/unauthorized"
       :juxt.site.alpha/type "ErrorResource"
       :ring.response/status 401})
     ;; end::put-unauthorized-error-resource![]
     ))))

(defn put-unauthorized-error-representation-for-html! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::put-unauthorized-error-representation-for-html![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-public-resource"
      {:xt/id "https://example.org/_site/errors/unauthorized.html"
       :juxt.site.alpha/variant-of "https://example.org/_site/errors/unauthorized"
       :juxt.http.alpha/content-type "text/html;charset=utf-8"
       :juxt.http.alpha/content "<h1>Unauthorized</h1>\r\n"})
     ;; end::put-unauthorized-error-representation-for-html![]
     ))))

(defn put-unauthorized-error-representation-for-html-with-login-link! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     ;; tag::put-unauthorized-error-representation-for-html-with-login-link![]
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-immutable-public-resource"
      {:xt/id "https://example.org/_site/errors/unauthorized.html"
       :juxt.site.alpha/variant-of "https://example.org/_site/errors/unauthorized"
       :juxt.http.alpha/content-type "text/html;charset=utf-8"
       :juxt.http.alpha/content (slurp "dev/unauthorized.html")})
     ;; end::put-unauthorized-error-representation-for-html-with-login-link![]
     ))))

(defn create-bearer-protection-space [_]
  (eval
   (substitute-actual-base-uri
    `(init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/put-protection-space"
      {:xt/id "https://example.org/protection-spaces/bearer"

       :juxt.site.alpha/canonical-root-uri "https://example.org"
       ;;:juxt.site.alpha/realm "Wonderland" ; optional

       :juxt.site.alpha/auth-scheme "Bearer"}))))

(defn login-with-form!
  "Return a session id (or nil) given a map of fields."
  [& {:strs [username password] :as args}]
  (let [result
        (form-based-auth/login-with-form! *handler*
         :juxt.site.alpha/uri (substitute-actual-base-uri "https://example.org/login")
         "username" username
         "password" password)]
    (:juxt.site.alpha/session-token result)))

;; TODO: Moved to oauth - use that instead
#_(defn authorize-response!
  "Authorize response"
  [& {:keys [session-id]
      client-id "client_id"
      scope "scope"
      :as args}]
  {:pre [(malli/validate
          [:map
           ^{:doc "to authenticate with authorization server"} [:session-id :string]
           ["client_id" :string]
           ["scope" {:optional true} [:sequential :string]]]
          args)]}
  (let [state (make-nonce 10)
        request {:ring.request/method :get
                 :ring.request/path "/oauth/authorize"
                 :ring.request/headers {"cookie" (format "id=%s" session-id)}
                 :ring.request/query
                 (codec/form-encode
                  (cond->
                      {"response_type" "token"
                       "client_id" client-id
                       "state" state}
                      scope (assoc "scope" (codec/url-encode (str/join " " scope)))))}]
    (*handler* request)))

;; TODO: Moved to oauth - use that instead
#_(defn authorize!
  "Authorize an application, and return decoded fragment parameters as a string->string map"
  [& {:as args}]
  {:pre [(malli/validate
          [:map
           ^{:doc "to authenticate with authorization server"} [:session-id :string]
           ["client_id" :string]
           ["scope" {:optional true} [:sequential :string]]]
          args)]
   :post [(malli/validate [:map-of :string :string] %)]}
  (let [response (authorize-response! args)
        _ (case (:ring.response/status response)
            302 :ok
            400 (throw (ex-info "Client error" (assoc args :response response)))
            403 (throw (ex-info "Forbidden to authorize" (assoc args :response response)))
            (throw (ex-info "Unexpected error" (assoc args :response response))))

        location-header (-> response :ring.response/headers (get "location"))

        [_ _ encoded] (re-matches #"https://(.*?)/terminal/callback#(.*)" location-header)]

    (codec/form-decode encoded)))

(defn create-graphql-endpoint [_]
  (let [session-token (login-with-form! "username" "ALICE" "password" "garden")
        {access-token "access_token"
         error "error"}
        (oauth/authorize!
         {:juxt.site.alpha/session-token session-token
          "client_id" "local-terminal"
          "scope" [(format "%s/oauth/scope/graphql/administer" (substitute-actual-base-uri "https://example.org"))]})
        _ (assert (nil? error) (format "OAuth2 grant error: %s" error))
        request
        {:ring.request/method :post
         :ring.request/path "/operations/install-graphql-endpoint"
         :ring.request/headers
         {"authorization" (format "Bearer %s" access-token)
          "content-type" "application/edn"}}]
    (*handler*
     (assoc-body
      request
      (.getBytes
       (pr-str
        {:xt/id (format "%s/graphql" (substitute-actual-base-uri "https://example.org"))}))))))

(defn create-operation-create-oauth-scope! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/create-oauth-scope"

       :juxt.site.alpha/transact
       {:juxt.flip.alpha/quotation
        `(
          (site/with-fx-acc
            [(site/push-fx
              (f/dip
               [site/request-body-as-edn
                (site/validate
                 [:map
                  [:xt/id [:re "https://example.org/oauth/scope/.*"]]])
                (site/set-type "https://meta.juxt.site/pass/oauth-scope")
                xtdb.api/put]))]))}

       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [permission :juxt.site.alpha/subject subject]]]})))))

(defn grant-permission-to-invoke-operation-create-oauth-scope! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id "https://example.org/permissions/system/create-oauth-scope"
       :juxt.site.alpha/subject "https://example.org/_site/subjects/system"
       :juxt.site.alpha/operation "https://example.org/operations/create-oauth-scope"
       :juxt.site.alpha/purpose nil})))))

(defn create-oauth-scope! [scope]
  (eval
   (substitute-actual-base-uri
    `(init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/operations/create-oauth-scope"
      {:xt/id ~scope}))))

(defn create-operation-put-user-owned-content! [_]
  (eval
   (substitute-actual-base-uri
    (quote
     (juxt.site.alpha.init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/create-operation"
      {:xt/id "https://example.org/operations/put-user-owned-content"
       :juxt.site.alpha/rules
       '[
         [(allowed? subject operation resource permission)
          [permission :juxt.site.alpha/user user]
          [subject :juxt.site.alpha/user-identity id]
          [id :juxt.site.alpha/user user]
          [resource :owner user]]]})))))

(defn grant-permission-to-put-user-owned-content! [username]
  (eval
   (substitute-actual-base-uri
    `(init/do-operation
      "https://example.org/_site/subjects/system"
      "https://example.org/_site/operations/grant-permission"
      {:xt/id ~(format "https://example.org/permissions/%s/put-user-owned-content" username)
       :juxt.site.alpha/operation "https://example.org/operations/put-user-owned-content"
       :juxt.site.alpha/user ~(format "https://example.org/users/%s" username)
       :juxt.site.alpha/purpose nil}))))

(def dependency-graph
  {"https://example.org/hello"
   {:create #'create-hello-world-resource!
    :deps #{::init/system
            "https://example.org/operations/put-immutable-public-resource"
            "https://example.org/permissions/system/put-immutable-public-resource"}}

   "https://example.org/operations/put-immutable-public-resource"
   {:create #'create-operation-put-immutable-public-resource!
    :deps #{::init/system
            "https://example.org/operations/get-public-resource"
            "https://example.org/permissions/public-resources-to-all"}}

   "https://example.org/permissions/system/put-immutable-public-resource"
   {:create #'grant-permission-to-invoke-operation-put-immutable-public-resource!
    :deps #{::init/system}}

   "https://example.org/operations/get-public-resource"
   {:create #'create-operation-get-public-resource!
    :deps #{::init/system}}

   "https://example.org/permissions/public-resources-to-all"
   {:create #'grant-permission-to-invoke-get-public-resource!
    :deps #{::init/system}}

   "https://example.org/operations/put-immutable-protected-resource"
   {:create #'create-operation-put-immutable-protected-resource!
    :deps #{::init/system}}

   "https://example.org/permissions/system/put-immutable-protected-resource"
   {:create #'grant-permission-to-put-immutable-protected-resource!
    :deps #{::init/system}}

   "https://example.org/operations/get-protected-resource"
   {:create #'create-operation-get-protected-resource!
    :deps #{::init/system}}

   "https://example.org/protected-by-session-scope/document.html"
   {:create #'create-resource-protected-by-session-scope!
    :deps #{::init/system
            "https://example.org/operations/put-immutable-protected-resource"
            "https://example.org/permissions/system/put-immutable-protected-resource"
            "https://example.org/operations/get-protected-resource"}}

   "https://example.org/operations/install-graphql-endpoint"
   {:create #'create-operation-install-graphql-endpoint!
    :deps #{::init/system}}

   "https://example.org/permissions/alice/install-graphql-endpoint"
   {:create #'grant-permission-install-graphql-endpoint-to-alice!
    :deps #{::init/system}}

   "https://example.org/private/internal.html"
   {:deps #{::init/system
            "https://example.org/_site/do-operation"
            "https://example.org/_site/subjects/system"
            "https://example.org/operations/put-immutable-protected-resource"
            "https://example.org/permissions/system/put-immutable-protected-resource"
            "https://example.org/operations/get-protected-resource"}
    :create #'create-internal-resource!}

   "https://example.org/permissions/alice/private/internal.html"
   {:deps #{::init/system
            "https://example.org/_site/subjects/system"
            "https://example.org/_site/operations/grant-permission"
            "https://example.org/operations/get-protected-resource"}
    :create #'grant-alice-permission-to-internal-resource!}

   "https://example.org/protection-spaces/bearer"
   {:deps #{::init/system
            "https://example.org/_site/do-operation"
            "https://example.org/_site/subjects/system"
            "https://example.org/operations/put-protection-space"
            "https://example.org/permissions/system/put-protection-space"}
    :create #'create-bearer-protection-space}

   "https://example.org/operations/put-graphql-schema"
   {:deps #{::init/system}
    :create #'create-operation-put-graphql-schema}

   "https://example.org/operations/get-graphql-schema"
   {:deps #{::init/system}
    :create #'create-operation-get-graphql-schema}

   "https://example.org/operations/graphql-request"
   {:deps #{::init/system}
    :create #'create-operation-graphql-request}

   "https://example.org/permissions/alice/put-graphql-schema"
   {:deps #{::init/system}
    :create #'grant-permission-put-graphql-schema-to-alice!}

   "https://example.org/permissions/alice/get-graphql-schema"
   {:deps #{::init/system}
    :create #'grant-permission-get-graphql-schema-to-alice!}

   "https://example.org/permissions/graphql-access-to-known-subjects"
   {:deps #{::init/system}
    :create #'grant-permission-graphql-request-to-known-subjects}

   "https://example.org/graphql"
   {:deps #{::init/system
            "https://example.org/oauth/authorize"
            "https://example.org/session-scopes/default"
            "https://example.org/login"
            "https://example.org/user-identities/alice/basic"
            "https://example.org/permissions/alice-can-authorize"

            "https://example.org/applications/local-terminal"

            "https://example.org/operations/install-graphql-endpoint"
            "https://example.org/permissions/alice/install-graphql-endpoint"

            "https://example.org/oauth/scope/graphql/administer"
            "https://example.org/oauth/scope/graphql/develop"
            "https://example.org/oauth/scope/graphql/query"
            "https://example.org/oauth/scope/graphql/mutation"
            "https://example.org/oauth/scope/graphql/subscription"

            ;; Operations referred to by the /graphql resource
            "https://example.org/operations/put-graphql-schema"
            "https://example.org/operations/get-graphql-schema"
            "https://example.org/operations/graphql-request"
            "https://example.org/permissions/graphql-access-to-known-subjects"}

    :create #'create-graphql-endpoint
    }

   ;; OAuth Scopes

   "https://example.org/operations/create-oauth-scope"
   {:deps #{::init/system}
    :create #'create-operation-create-oauth-scope!}

   "https://example.org/permissions/system/create-oauth-scope"
   {:deps #{::init/system}
    :create #'grant-permission-to-invoke-operation-create-oauth-scope!}

   ;; Individual OAuth2 scopes

   "https://example.org/oauth/scope/graphql/administer"
   {:deps #{::init/system
            "https://example.org/operations/create-oauth-scope"
            "https://example.org/permissions/system/create-oauth-scope"}
    :create (fn [_] (#'create-oauth-scope! "https://example.org/oauth/scope/graphql/administer"))}

   "https://example.org/oauth/scope/graphql/develop"
   {:deps #{::init/system
            "https://example.org/operations/create-oauth-scope"
            "https://example.org/permissions/system/create-oauth-scope"}
    :create (fn [_] (#'create-oauth-scope! "https://example.org/oauth/scope/graphql/develop"))}

   "https://example.org/oauth/scope/graphql/query"
   {:deps #{::init/system
            "https://example.org/operations/create-oauth-scope"
            "https://example.org/permissions/system/create-oauth-scope"}
    :create (fn [_] (#'create-oauth-scope! "https://example.org/oauth/scope/graphql/query"))}

   "https://example.org/oauth/scope/graphql/mutation"
   {:deps #{::init/system
            "https://example.org/operations/create-oauth-scope"
            "https://example.org/permissions/system/create-oauth-scope"}
    :create (fn [_] (#'create-oauth-scope! "https://example.org/oauth/scope/graphql/mutation"))}

   "https://example.org/oauth/scope/graphql/subscription"
   {:deps #{::init/system
            "https://example.org/operations/create-oauth-scope"
            "https://example.org/permissions/system/create-oauth-scope"}
    :create (fn [_] (#'create-oauth-scope! "https://example.org/oauth/scope/graphql/subscription"))}

   ;; Required by user-directory-test

   "https://example.org/operations/put-user-owned-content"
   {:deps #{::init/system}
    :create #'create-operation-put-user-owned-content!}

   "https://example.org/permissions/alice/put-user-owned-content"
   {:deps #{::init/system}
    :create (fn [_] (#'grant-permission-to-put-user-owned-content! "alice"))}

   "https://example.org/permissions/bob/put-user-owned-content"
   {:deps #{::init/system}
    :create (fn [_] (#'grant-permission-to-put-user-owned-content! "bob"))}})
