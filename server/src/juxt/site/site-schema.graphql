schema
@site(type: "juxt.site/graphql-type")
{
  query: Query
}

"""
Root query object
"""
type Query {
  """
  Access user details for all users in the system
  """
  allUsers: [SiteUser]
  @site(q: { find: [e] where: [[e {keyword: "juxt.site/type"} "User"]]})

  """
  Access a single user's details
  """
  user(username: String!): [SiteUser]
  @site(q:
    { find: [e]
      where: [[e {keyword: "juxt.site/type"} "User"]
              [e {keyword: "juxt.site/username"} username]]})

  """
  Access Site's system
  """
  system: SiteSystem @site(resolver: "juxt.site.graphql-resolver/system")

  """
  Access a request
  """
  request(id: ID!): SiteRequest
    @site(resolver: "juxt.site.graphql-resolver/request")

  requests(limit: Int offset: Int): SiteRequests
    @site(resolver: "juxt.site.graphql-resolver/requests")

  """
  Access the currently logged in user
  """
  subject: SiteSubject
    @site(resolver: "juxt.site.graphql-resolver/subject")

  """
  See the available openapi and graphql APIs in the system
  """
  apis: [Api!]! @site(resolver: "juxt.site.graphql-resolver/apis")
}

enum ApiType {
  GRAPHQL
  OPENAPI
}

type Api {
  id: ID!
  type: ApiType!
  contents: JSON!
}

type SiteSubject {
  user: SiteUser
  authScheme: String
}

"""
An object representing a Site user. Anyone who needs to log in to the system must have a user record.
"""
type SiteUser {
  id: ID!
  username: String @site(a: "juxt.site/username")
  name: String
  email: String
  roles: [SiteRole]
    @site(q: { find: [role]
               where: [[role {keyword: "juxt.site/type"} "Role"]
                       [mapping {keyword: "juxt.site/type"} "UserRoleMapping"]
                       [mapping {keyword: "juxt.site/assignee"} object]
                       [mapping {keyword: "juxt.site/role"} role]]})}


"""
A Site role, for using in policies to grant authorization to access certain resources.
"""
type SiteRole {
  id: ID!
  name: String!
  description: String
}

type SiteConfiguration {
  baseUri: String!
  unixPassPasswordPrefix: String!
  serverPortNumber: Int!
}

type SiteSystem {
  database: SiteDatabaseStatus!
  """
  Access Site's configuration
  """
  # Adding a NON_NULL wrapper (Configuration!) seems to break introspection on
  # GraphiQL, this might not have been completely implemented yet. For now,
  # don't use NON_NULL.
  configuration: SiteConfiguration!

  version: SiteVersionDetails!
  status: SiteStatusDetails!
}

type SiteVersionDetails {
  gitSha: String!
}

type SiteStatusDetails {
  txLogAvail: Int!
  docStoreAvail: Int!
  indexStoreAvail: Int!
}

type SiteDatabaseStatus {
  version: String!
  revision: String!
  indexVersion: Int!
  kvStore: String!
  estimateNumKeys: Int!
  kvSize: Int!
  attributeStats: [SiteAttributeStat!]!
}

type SiteAttributeStat {
  attribute: String!
  frequency: Int!
}

type SiteRequests {
  count: Int!
  summaries: [SiteRequest!]!
}

scalar JSON

# https://www.npmjs.com/package/graphql-iso-date
# 2007-12-03T10:15:30Z
scalar DateTime

type SiteRequest {
  id: ID!
  method: String @site(a: "ring.request/method")
  requestUri: ID @site(a: "juxt.site/uri")
  date: DateTime @site(a: "juxt.site/date")
  durationMillis: Int @site(a: "juxt.site/duration-millis")
  requestHeaders: JSON @site(a: "ring.request/headers")
  "The GraphQL operation name called by the request"

  graphqlStoredQueryResourcePath: String @site(a: "juxt.site/graphql-stored-query-resource-path")
  graphqlOperationName: String @site(a: "juxt.site/graphql-operation-name")
  graphqlVariables: JSON @site(a: "juxt.site/graphql-variables")

  status: Int @site(a: "ring.response/status")
  statusMessage: String @site(a: "juxt.site/status-message")

  errors: [SiteError] @site(resolver: "juxt.site.graphql-resolver/extract-errors-resolver")
  #@site(a: "juxt.site/errors" transform: "juxt.site.graphql-resolver/->graphql-error")

  _detail: JSON
}

interface SiteError {
  message: String
  stackTrace: [SiteStackTraceElement]
  exData: JSON
}

type SiteGeneralError implements SiteError {
  message: String @site(a: "message")
  stackTrace: [SiteStackTraceElement] @site(resolver: "juxt.site.graphql-resolver/stack-trace-resolver")
  exData: JSON @site(a: "ex-data")
}

type SiteGraphqlExecutionError implements SiteError {
  message: String @site(a: "message")
  stackTrace: [SiteStackTraceElement] @site(resolver: "juxt.site.graphql-resolver/stack-trace-resolver")
  exData: JSON @site(a: "ex-data")

  storedQueryResourcePath: String @site(a: "juxt.site/graphql-stored-query-resource-path")
  operationName: String @site(a: "juxt.site/graphql-operation-name")
  variables: JSON @site(a: "juxt.site/graphql-variables")
  fieldErrors: [SiteGraphqlFieldError] @site(resolver: "juxt.site.graphql-resolver/graphql-errors")
}

# Essentially, a String or an Int
scalar SiteGraphqlPathElement

type SiteGraphqlFieldError {
  message: String
  locations: [SiteGraphqlLocation]
  path: [SiteGraphqlPathElement] @site(a: "path")
  stackTrace: JSON @site(a: ["extensions" "stack-trace"])
  extensions: JSON
}

type SiteGraphqlLocation {
  line: Int
  column: Int
}

type SiteStackTraceElement {
  methodName: String
  fileName: String
  lineNumber: Int
  className: String
}
